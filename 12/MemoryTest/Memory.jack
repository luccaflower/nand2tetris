// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        let freeList = heap;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var bool found;
        var Array segment;
        var int possible, addr;
        let segment = freeList;
        while(~(segment = 0)) {
            let possible = size + 2;
            if ((segment[1] > possible) | (segment[1] = possible)) {
                let addr = segment + segment[1] - size -1;
                let addr[-1] = size;
                let segment[1] = segment[1] - size - 2;
                return addr;
            }
            let segment = segment[0];
        }
        do Sys.error(9);
        return 0;
    }

    /*  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        let segment = freeList;
        while (~(segment[0] = 0)) {
            let segment = segment[0];
        }
        let segment[0] = o-2;
        let o[-2] = 0; 
        return;
    }    
}
