// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //D-register
    And(a=instruction[15],b=instruction[4],out=loadd);
    DRegister(in=aluout,load=loadd,out=dout);

    //A-register
    Mux16(a=instruction,b=aluout,sel=instruction[15],out=ain);
    //Load A if A-instruction or DST is A
    Not(in=instruction[15],out=isainstruction);
    Or(a=isainstruction,b=instruction[5],out=loada);
    ARegister(in=ain,load=loada,out=aout,out[0..14]=addressM);

    //Select A or M for Y-input to ALU
    Mux16(a=aout,b=inM,sel=instruction[12],out=aorm);
    
    //Program-counter
    //do jump
    And(a=instruction[2],b=isnegative,out=negativejump);
    And(a=instruction[1],b=iszero,out=zerojump);
    Not(in=isnegative,out=notnegative);
    Not(in=iszero,out=notzero);
    And(a=notnegative,b=notzero,out=ispositive);
    And(a=instruction[0],b=ispositive,out=positivejump);
    Or(a=negativejump,b=zerojump,out=ltejump);
    Or(a=ltejump,b=positivejump,out=shouldjump);
    //only jump on C-instruction
    And(a=instruction[15],b=shouldjump,out=dojump);
    //load, reset, or increment
    Not(in=dojump,out=nojump);
    Not(in=reset,out=notreset);
    And(a=nojump,b=notreset,out=inc);

    PC(in=aout,inc=inc,reset=reset,load=dojump,out[0..14]=pc);

    //ALU
    ALU(zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],
    no=instruction[6],x=dout,y=aorm,out=outM,out=aluout,zr=iszero,ng=isnegative);

    //Write M if C-instruction and dst M
    And(a=instruction[15],b=instruction[3],out=writeM);
}
